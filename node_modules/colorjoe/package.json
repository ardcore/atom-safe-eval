{
  "name": "colorjoe",
  "description": "Scaleable color picker",
  "author": {
    "name": "Juho Vepsalainen",
    "email": "bebraw@gmail.com"
  },
  "version": "0.9.2",
  "dependencies": {
    "dragjs": "0.4.1"
  },
  "devDependencies": {
    "grunt": "0.4.1",
    "grunt-contrib-watch": "0.4.4",
    "grunt-contrib-uglify": "0.2.2",
    "grunt-contrib-concat": "0.3.0",
    "grunt-umd": "1.1.0"
  },
  "repository": {
    "type": "git",
    "url": "https://bebraw@github.com/bebraw/colorjoe.git"
  },
  "homepage": "https://bebraw.github.com/colorjoe",
  "bugs": {
    "url": "https://github.com/bebraw/colorjoe/issues"
  },
  "keywords": [
    "color",
    "colour",
    "requirejs",
    "amd"
  ],
  "main": "dist/colorjoe.js",
  "license": "MIT",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/bebraw/colorjoe/blob/master/LICENSE"
    }
  ],
  "readme": "# colorjoe - The Scaleable Color Picker\n\ncolorjoe was somewhat inspired by\n[ColorJack](http://www.dynamicdrive.com/dynamicindex11/colorjack/index.htm) and\n[RightJS Colorpicker](http://rightjs.org/ui/colorpicker). Unlike those it\nactually scales pretty well. Essentially this means that you'll be able to\ndefine its actual dimensions and layout using a bit of CSS. This way the widget\nfits well responsive layouts.\n\nIn addition it's relatively easy to implement missing functionality (RGB fields,\nwhatnot) thanks to the simple API it provides.\n\n## Installation\n\nAdd prepackaged `dist/colorjoe.js` and `css/colorjoe.css` to your page or use AMD to load\nthe dependencies from `src/`.\n\nNote that you need to load [one.color](https://github.com/One-com/one-color) before using `colorjoe`. In case you are using RequireJS, shim it at your configuration so that it is bound to `onecolor`.\n\n## Usage\n\n```javascript\nvar joe = colorjoe.rgb(element_id_or_dom_object, initial_color_value, extras);\n```\n\nor\n\n```javascript\nvar joe = colorjoe.hsl(element_id_or_dom_object, initial_color_value, extras);\n```\n\n### Event Handling\n\nThe returned joe object is an event emitter style object with `change` and\n`done` events. The `change` event is fired continuously when selecting and\n`done` is fired when user has stopped selecting.\n\n\n```javascript\njoe.on(\"change\", function(color) {\n    console.log(\"Selecting \" + color.css());\n});\n\njoe.on(\"done\", function(color) {\n    console.log(\"Selected \" + color.css());\n});\n```\n\nThe color object is from [one.color](https://github.com/One-com/one-color).\n\nGiven it might be nice to trigger these events immediately, there is a specific\n`update` method. Ie. joe.on(\"change\", function() {...}).update() would trigger\n`change` immediately. This is handy for initializing your work.\n\n### Get and Set\n\nIn addition there are `set` and `get` methods. Ie. joe.get() would return the\ncurrent color while joe.set('#aabbcc') would set it. `set` expects a parameter\nthat one.color default constructor would accept.\n\n### Extras\n\nIn order to make it easier to customize a picker based on your needs, colorjoe\nprovides a few extras. The following example shows how to use them:\n\n```javascript\nvar joe = colorjoe.hsl('hslPicker', 'red', [\n    'currentColor',\n    'alpha',\n    ['fields', {space: 'HSL', limit: 255, fix: 0},\n    'hex'\n]);\n```\n\nThe code above would generate a HSL picker that shows in addition the currently\nselected color, alpha slider, HSL input fields and a hex field.\n\nAs you can see `fields` has been defined using an array. This array contains\nthe name of the extra and then parameters passed to inside an object. In this\ncase the extra accepts name of a color space (RGB, HSL, HSV or CMYK). If you\nappend `A` to the color space, it will show a control for alpha too. In\naddition it takes a limit value (defaults to 255) and a fix value\n(defaults to 0). fix represents the amount of numbers shown after decimal.\n\n`hex` extra accepts optional `label`. If set it will show that as the input's\nlabel.\n\n### Implementing Custom Extras\n\nIt is possible to implement your custom extras without having to hack the core\ncode. This can be done as follows:\n\n```javascript\ncolorjoe.registerExtra('text', function(p, joe, o) {\n    // attach new elements to p element here (as children that is)\n    // o is optional and will contain any parameters you might have\n    // passed to the extra using the array syntax\n\n    // optional return. these are triggered by colorjoe\n    // use this way instead of joe.on\n    return {\n        change: function(col) {},\n        done: function(col) {}\n    };\n})\n```\n\nNow you can simply pass your `text` extra amongst the others and it will just\nwork.\n\n## Contributors\n\n* [Juho Vepsäläinen](https://github.com/bebraw) - Core\n* [Esa-Matti Suuronen](https://github.com/epeli) -\n  [Grunt](https://github.com/cowboy/grunt) support + removeAllListeners\n* [Peter Müller](https://github.com/Munter) -\n  [one.color](https://github.com/One-com/one-color) + HTML tweaks\n* [Edmundas Kondrašovas](https://github.com/edmundask) - Callback `done` fix\n* [Fabio Caseri](https://github.com/fabiocaseri) - Use hex code instead of `black`\n\n## Hacking\n\nDownload the dependencies using `npm` (npm install) and then use [grunt](http://gruntjs.com/) to build prepackaged files in `dist/`.\n\n## License\n\ncolorjoe is available under MIT. See [LICENSE](https://github.com/bebraw/colorjoe/blob/master/LICENSE) for more details.\n\n",
  "readmeFilename": "README.md",
  "_id": "colorjoe@0.9.2",
  "_from": "colorjoe@>=0.9.2"
}
